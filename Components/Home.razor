@page "/"
@using marpha.Services
@using marpha.Data
@inject ITransactionService TransactionService
@inject IDebtService DebtService
@inject ICategoryService CategoryService

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .dashboard-card.total-income {
        border: 1px solid #3e9c35;
        color: #3e9c35;
    }

    .dashboard-card.total-expense {
        border: 1px solid #950606;
        color: #950606
    }

    .dashboard-card.total-debt {
        border: 1px solid #ddb103;
        color: #ddb103;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-4">
            <div class="dashboard-card total-income text-center d-flex flex-column align-items-start justify-content-between">
                <div class="d-flex justify-content-between w-100">
                    <h5>Income</h5>
                    <button class="btn btn-dark btn-sm btn-block" @onclick="OpenTransactionModal">Add Income +</button>
                </div>

                <div>
                    <h2>@totalIncome</h2>
                </div>

                <div class="align-self-end">
                    <a>See All ></a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card total-expense text-center d-flex flex-column align-items-start justify-content-between">
                <div class="d-flex justify-content-between w-100">
                    <h5>Expense</h5>
                    <button class="btn btn-dark btn-sm btn-block" @onclick="OpenTransactionModal">Add Expense +</button>
                </div>
                
                <div>
                <h2>@totalExpense</h2>
                </div>

                <div class="align-self-end">
                    <a>See All ></a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card total-debt text-center d-flex flex-column align-items-start justify-content-between">
                <div class="d-flex justify-content-between w-100">
                    <h5>Debt</h5>

                    <div class="d-flex gap-3">
                        <button class="btn btn-dark btn-sm" @onclick="OpenDebtModal">Add Debt +</button>
                        <button class="btn btn-dark btn-sm">Pay Debt -</button>
                    </div>
                </div>

                <div>
                    <h2>@totalDebt</h2>
                </div>

                <div class="align-self-end">
                    <a>See All ></a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
    <div class="col-md-4">
        <table class="table table-bordered table-striped">
        <thead>
            <tr class="bg-success text-white">
                <th>Income Name</th>
                <th>Amount</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var income in incomes)
            {
                <tr>
                    <td>@income.TransactionName</td>
                    <td>@income.TransactionAmount</td>
                    <td>@income.TransactionDate.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
    </div>

    <!-- Table for Expense -->
    <div class="col-md-4">
        <table class="table table-bordered table-striped">
        <thead>
            <tr class="bg-danger text-white">
                <th>Expense Name</th>
                <th>Amount</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses)
            {
                <tr>
                    <td>@expense.TransactionName</td>
                    <td>@expense.TransactionAmount</td>
                    <td>@expense.TransactionDate.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
    </div>

    <div class="col-md-4">
        <table class="table table-bordered table-striped">
        <thead>
            <tr class="bg-warning text-white">
                <th>Debt Name</th>
                <th>Amount</th>
                <th>Due Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var debt in debts)
            {
                <tr>
                    <td>@debt.DebtName</td>
                    <td>@debt.DebtAmount</td>
                    <td>@debt.DebtDueDate.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
    </div>
    </div>
    
    <div class="row">
        <div class="col-md-4">
            Chart
        </div>
    </div>
    <div>
        <h4>Top Transactions</h4>
        <table border="1" cellpadding="5" cellspacing="0" style="width: 100%; border-collapse: collapse;">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Name</th>
                    <th>Amount</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @if (topIncome != null)
                {
                    <tr>
                        <td>Income</td>
                        <td>@topIncome.TransactionName</td>
                        <td>@topIncome.TransactionAmount</td>
                        <td>@topIncome.TransactionDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
                @if (topExpense != null)
                {
                    <tr>
                        <td>Expense</td>
                        <td>@topExpense.TransactionName</td>
                        <td>@topExpense.TransactionAmount</td>
                        <td>@topExpense.TransactionDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
                @if (topDebt != null)
                {
                    <tr>
                        <td>Debt</td>
                        <td>@topDebt.DebtName</td>
                        <td>@topDebt.DebtAmount</td>
                        <td>@topDebt.DebtDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div style="margin-top: 20px;">
        <h4>Debts</h4>
        <table border="1" cellpadding="5" cellspacing="0" style="width: 100%; border-collapse: collapse;">
            <thead>
                <tr>
                    <th>Debt Name</th>
                    <th>Amount</th>
                    <th>Description</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in debts)
                {
                    <tr>
                        <td>@debt.DebtName</td>
                        <td>@debt.DebtAmount</td>
                        <td>@debt.DebtDescription</td>
                        <td>@debt.DebtDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>


<!-- Transaction Modal -->
@if (showTransactionModal)

{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseTransactionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Transaction Name</label>
                        <input type="text" class="form-control" @bind="newTransaction.TransactionName" />
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="newTransaction.TransactionType">
                            <option value=""></option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newTransaction.TransactionAmount" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.TransactionDate" />
                    </div>
                    <div class="mb-3">
                        <label>Category</label>
                        <select class="form-control" @bind="newTransaction.TransactionCategory">
                            <option value=""></option>
                                @foreach (var category in categories)
                                {
                                <option value="@category.CategoryName">@category.CategoryName</option>
                     
                                }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Description</label>
                        <textarea class="form-control" @bind="newTransaction.TransactionDescription"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseTransactionModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Save</button>

                    <div class="color-danger">@error</div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Debt Modal -->
@if (showDebtModal)

{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Debt</h5>
                    <button type="button" class="btn-close" @onclick="CloseDebtModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Debt Name</label>
                        <input type="text" class="form-control" @bind="newDebt.DebtName" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newDebt.DebtAmount" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newDebt.DebtDate" />
                    </div>
                    <div class="mb-3">
                        <label>Category</label>
                        <select class="form-control" @bind="newTransaction.TransactionCategory">
                            <option value=""></option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryName">@category.CategoryName</option>

                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Description</label>
                        <textarea class="form-control" @bind="newDebt.DebtDescription"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDebtModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddDebt">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

    @code {
        private List<Transaction> transactions = new List<Transaction>();
        private List<Debt> debts = new List<Debt>();
        private Transaction newTransaction = new Transaction();
        private Debt newDebt = new Debt();
        private decimal totalTransaction;
        private decimal totalIncome;
        private decimal totalExpense;
        private decimal totalDebt;
        private bool showTransactionModal;
        private bool showDebtModal;

        private List<Category> categories;

        private string selectedFilter = "all"; 
        private List<Transaction> filteredTransactions  = new List<Transaction>();

        private List<Transaction> incomes  = new List<Transaction>();
        private List<Transaction> expenses = new List<Transaction>();

        private Transaction? topIncome;
        private Transaction? topExpense;
        private Debt? topDebt;

        private DateTime? FromDate { get; set; }
        private DateTime? ToDate { get; set; }

        private string error;

        protected override async Task OnInitializedAsync()
        {
            await LoadDataAsync();
            await FindTopTransactions();
            
            filteredTransactions = transactions;
        }

        private async Task FindTopTransactions()
        {
            var incomes = await TransactionService.GetTransactionByTypeAsync("Income");
            var expenses = await TransactionService.GetTransactionByTypeAsync("Expense");
            var debts = await DebtService.GetAllDebtsAsync();

            topIncome = incomes
                .OrderByDescending(i => i.TransactionAmount)
                .FirstOrDefault();

            topExpense = expenses
                .OrderByDescending(e => e.TransactionAmount)
                .FirstOrDefault();

            topDebt = debts
                .OrderByDescending(d => d.DebtAmount)
                .FirstOrDefault();
        }

        private async Task LoadDataAsync()
        {
            transactions = await TransactionService.GetAllTransactionsAsync();

            incomes = await TransactionService.GetTransactionByTypeAsync("Income");
            expenses = await TransactionService.GetTransactionByTypeAsync("Expense");
            debts = await DebtService.GetAllDebtsAsync();

            categories = await CategoryService.GetAllCategoriesAsync();
            CalculateTotals();
        }

        private void FilterTransactionsByType(ChangeEventArgs e)
        {
            selectedFilter = e.Value?.ToString() ?? "all";

            filteredTransactions = selectedFilter switch
            {
                "income" => transactions.Where(t => t.TransactionType.Equals("Income", StringComparison.OrdinalIgnoreCase)).ToList(),
                "expense" => transactions.Where(t => t.TransactionType.Equals("Expense", StringComparison.OrdinalIgnoreCase)).ToList(),
                _ => transactions
            };

            filteredTransactions = filteredTransactions
            .Where(t => (!FromDate.HasValue || t.TransactionDate >= FromDate.Value) &&
            (!ToDate.HasValue || t.TransactionDate <= ToDate.Value))
            .ToList();
        }

        private void CalculateTotals()
        {
            totalIncome = (decimal)transactions.Where(t => t.TransactionType == "Income").Sum(t => t.TransactionAmount);
            totalExpense = (decimal)transactions.Where(t => t.TransactionType == "Expense").Sum(t => t.TransactionAmount);
            totalDebt = (decimal)debts.Sum(d => d.DebtAmount);

            totalTransaction = totalIncome + totalDebt - totalExpense;

        }

        private void OpenTransactionModal()
        {
            newTransaction = new Transaction { TransactionDate = DateTime.Now };
            showTransactionModal = true;
        }

        private void CloseTransactionModal()
        {
            error = "";
            showTransactionModal = false;
        }

        private async Task AddTransaction()
        {
            try
            {
                if(newTransaction.TransactionType == "Expense")
                {
                    var totalIncome = (int)await TransactionService.GetTotalTransactionByTypeAsync("Income");
                    var totalDebt = (int)await DebtService.GetTotalDebtAsync();
                    var balance = totalIncome + totalDebt;
                    if ((int)newTransaction.TransactionAmount > balance)
                    {
                        Console.WriteLine("Not Enough Balance");
                        error = "Insufficient Balance";
                        return;
                } 
            } 

            newTransaction.TransactionId = await TransactionService.GetTransactionsCountAsync();
            var success = await TransactionService.AddTransactionAsync(newTransaction);
            if (success)
            {
                transactions.Add(newTransaction);
                CalculateTotals();
                CloseTransactionModal();
            }
            else
            {
                Console.WriteLine("Failed to add transaction. Duplicate TransactionId.");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding transaction: {ex.Message}");
        }
    }

    private void OpenDebtModal()
    {
        newDebt = new Debt { DebtDate = DateTime.Now };
        showDebtModal = true;
    }

    private void CloseDebtModal()
    {
        showDebtModal = false;
    }

    private async Task AddDebt()
    {
        try
        {
            newDebt.DebtId = await DebtService.GetDebtsCountAsync();
            var success = await DebtService.AddDebtAsync(newDebt);

            if (success)
            {
                debts.Add(newDebt);
                CalculateTotals();
                CloseDebtModal();
            }
            else
            {
                Console.WriteLine("Failed to add debt. Duplicate DebtId.");
            }
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Error adding debt: {ex.Message}");
        }
    }
}

</div>