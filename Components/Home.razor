@page "/"
@using marpha.Services
@using marpha.Data
@using marpha.Components
@using marpha.Components.Modals
@inject ITransactionService TransactionService
@inject IDebtService DebtService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IFilterService FilterService
@inject IDebtFilterService DebtFilterService

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .dashboard-card.total-income {
        border: 1px solid #3e9c35;
        color: #3e9c35;
    }

    .dashboard-card.total-expense {
        border: 1px solid #950606;
        color: #950606
    }

    .dashboard-card.total-debt {
        border: 1px solid #ddb103;
        color: #ddb103;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

<div class="container mt-4">
    <div class="d-flex align-items-end justify-content-between mb-3">
        <div class="d-flex gap-3">
            <div>
                <label for="startDate">Start Date</label>
                <input type="date" id="startDate" class="form-control" @bind="StartDate" />
            </div>
            <div>
                <label for="endDate">End Date</label>
                <input type="date" id="endDate" class="form-control" @bind="EndDate" />
            </div>
        </div>

        <div>
            <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
            <button class="btn btn-secondary" @onclick="ClearFilters">Clear Filters</button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="dashboard-card total-income text-center d-flex flex-column align-items-start justify-content-between">
                <div class="d-flex justify-content-between w-100">
                    <h5>Income</h5>
                    <button class="btn btn-dark btn-sm btn-block" @onclick="OpenTransactionModal">Add Income +</button>
                </div>

                <div>
                    <h2>@totalIncome</h2>
                </div>

                <div class="d-flex justify-content-between align-items-center w-100">
                    <div class="fw-bolder">Total Transactions: @numberOfIncome</div>
                    <button class="btn btn-outline-success" @onclick='() => NavigateToDetailsPage("IncomeDetails")'>See All ></button>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card total-expense text-center d-flex flex-column align-items-start justify-content-between">
                <div class="d-flex justify-content-between w-100">
                    <h5>Expense</h5>
                    <button class="btn btn-dark btn-sm btn-block" @onclick="OpenTransactionModal">Add Expense +</button>
                </div>
                
                <div>
                <h2>@totalExpense</h2>
                </div>

                <div class="d-flex justify-content-between align-items-center w-100">
                    <div class="fw-bolder">Total Transactions: @numberOfExpense</div>
                    <button class="btn btn-outline-danger" @onclick='() => NavigateToDetailsPage("ExpenseDetails")'>See All ></button>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card total-debt text-center d-flex flex-column align-items-start justify-content-between">
                <div class="d-flex justify-content-between w-100">
                    <h5>Debt</h5>

                    <div class="d-flex gap-3">
                        <button class="btn btn-dark btn-sm" @onclick="OpenDebtModal">Add Debt +</button>
                    </div>
                </div>

                <div>
                    <h2>@totalDebt</h2>
                </div>

                <div class="d-flex align-items-center justify-content-between w-100">
                    <div class="fw-bolder">Total Transactions: @numberOfDebts</div>
                    <button class="btn btn-outline-warning" @onclick='() => NavigateToDetailsPage("DebtDetails")'>See All ></button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
    <div class="col-md-4">
        <table class="table table-bordered table-striped">
        <thead>
            <tr class="bg-success text-white">
                <th>Income Name</th>
                <th>Amount</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var income in FilteredIncomes.Take(5))
            {
                <tr>
                    <td>@income.TransactionName</td>
                    <td>@income.TransactionAmount</td>
                    <td>@income.TransactionDate.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
    </div>

    <!-- Table for Expense -->
    <div class="col-md-4">
        <table class="table table-bordered table-striped">
        <thead>
            <tr class="bg-danger text-white">
                <th>Expense Name</th>
                <th>Amount</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
                    @foreach (var expense in FilteredExpenses.Take(5))
            {
                <tr>
                    <td>@expense.TransactionName</td>
                    <td>@expense.TransactionAmount</td>
                    <td>@expense.TransactionDate.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
    </div>

    <div class="col-md-4">
        <table class="table table-bordered table-striped">
        <thead>
            <tr class="bg-warning text-white">
                <th>Debt Name</th>
                <th>Amount</th>
                <th>Due Date</th>
            </tr>
        </thead>
        <tbody>
                    @foreach (var debt in FilteredDebts.Take(5))
            {
                <tr>
                    <td>@debt.DebtName</td>
                    <td>@debt.DebtAmount</td>
                    <td>@debt.DebtDueDate.ToString("yyyy-MM-dd")</td>
                </tr>
            }
        </tbody>
    </table>
    </div>
    </div>

    <div class="d-flex justify-content-center align-items-center w-100">
        <PieChart Slice1="@Slice1" Slice2="@Slice2" Slice3="@Slice3" />
    </div>
    
    <div>
        <h4>Top Transactions</h4>
        <div class="container mt-5">
    <div class="row">
        @* Top Income Card *@
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header bg-success text-white">
                    Top Income
                </div>
                
                <div class="card-body">
                    @if (topIncome != null)
                    {
                        <h4 class="card-title">@topIncome.TransactionName</h4>
                        <h5 class="card-title">@topIncome.TransactionAmount</h5>
                        <p class="card-text">Highest income recorded in the period.</p>
                    }
                </div>
            </div>
        </div>

        @* Top Expense Card *@
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header bg-warning text-dark">
                    Top Expense
                </div>
                <div class="card-body">
                    @if (topExpense != null) 
                    {
                        <h4 class="card-title">@topExpense.TransactionName</h4>
                        <h5 class="card-title">@topExpense.TransactionAmount</h5>
                        <p class="card-text">Highest expense recorded in the period.</p>
                    }
                </div>
            </div>
        </div>

        @* Top Debt Card *@
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    Top Debt
                </div>
                <div class="card-body">
                    @if (topDebt != null) 
                    {
                        <h4 class="card-title">@topDebt.DebtName</h4>
                        <h5 class="card-title">@topDebt.DebtAmount</h5>
                        <p class="card-text">Highest debt recorded in the period.</p>
                    }
                </div>
            </div>
        </div>

        @* Lowest Income Card *@
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header bg-danger text-white">
                    Lowest Income
                </div>
                <div class="card-body">
                    @if (bottomIncome != null) 
                    {
                        <h4 class="card-title">@bottomIncome.TransactionName</h4>
                        <h5 class="card-title">@bottomIncome.TransactionAmount</h5>
                        <p class="card-text">Lowest income recorded in the period.</p>
                    }
                </div>
            </div>
        </div>

        @* Lowest Expense Card *@
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header bg-info text-white">
                    Lowest Expense
                </div>
                <div class="card-body">
                    @if (bottomExpense != null) 
                    {
                        <h4 class="card-title">@bottomExpense.TransactionName</h4>
                        <h5 class="card-title">@bottomExpense.TransactionAmount</h5>
                        <p class="card-text">Lowest expense recorded in the period.</p>
                    }
                </div>
            </div>
        </div>

        @* Lowest Debt Card *@
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header bg-secondary text-white">
                    Lowest Debt
                </div>
                <div class="card-body">
                    @if (bottomDebt != null && bottomDebt.DebtAmount != 0l) 
                    {
                        <h4 class="card-title">@bottomDebt.DebtName</h4>
                        <h5 class="card-title">@bottomDebt.DebtAmount</h5>
                        <p class="card-text">Lowest debt recorded in the period.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
    </div>
    <div style="margin-top: 20px;">
        <h4>Pending Debts</h4>
        <table class="table table-bordered table-warning">
            <thead>
                <tr>
                    <th>Debt Name</th>
                    <th>Amount</th>
                    <th>Description</th>
                    <th>Date</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in FilteredDebts)
                {
                    if(debt.DebtAmount != 0)
                    {
                        <tr>
                            <td>@debt.DebtName</td>
                            <td>@debt.DebtAmount</td>
                            <td>@debt.DebtDescription</td>
                            <td>@debt.DebtDate.ToString("yyyy-MM-dd")</td>
                            <td class="d-flex gap-3">
                                <input placeholder="Debt Amount to pay..." @bind="debtPayingAmount" />
                                <button class="btn btn-secondary btn-sm" @onclick="() => PayDebt(debt)">Pay</button>
                            </td>
                        </tr>                 
                    }    
                }
            </tbody>
        </table>
    </div>

<!-- Transaction Modal -->
@if (showTransactionModal)

{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseTransactionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Transaction Name</label>
                        <input type="text" class="form-control" @bind="newTransaction.TransactionName" />
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="newTransaction.TransactionType">
                            <option value=""></option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newTransaction.TransactionAmount" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.TransactionDate" />
                    </div>
                    <div class="mb-3">
                        <label>Category</label>
                        <select class="form-control" @bind="newTransaction.TransactionCategory">
                            <option value=""></option>
                                @foreach (var category in categories)
                                {
                                <option value="@category.CategoryName">@category.CategoryName</option>
                     
                                }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Description</label>
                        <textarea class="form-control" @bind="newTransaction.TransactionDescription"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseTransactionModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Save</button>

                    <div class="color-danger">@error</div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Debt Modal -->
@if (showDebtModal)

{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Debt</h5>
                    <button type="button" class="btn-close" @onclick="CloseDebtModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Debt Name</label>
                        <input type="text" class="form-control" @bind="newDebt.DebtName" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newDebt.DebtAmount" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newDebt.DebtDate" />
                    </div>
                        <div class="mb-3">
                            <label>Due Date</label>
                            <input type="date" class="form-control" @bind="newDebt.DebtDueDate" />
                        </div>
                    <div class="mb-3">
                        <label>Category</label>
                        <select class="form-control" @bind="newTransaction.TransactionCategory">
                            <option value=""></option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryName">@category.CategoryName</option>

                            }
                        </select>
                    </div>
                        <div class="mb-3">
                            <label>Debt Source</label>
                            <input class="form-control" @bind="newDebt.DebtSource"></input>
                        </div>
                    <div class="mb-3">
                        <label>Description</label>
                        <textarea class="form-control" @bind="newDebt.DebtDescription"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDebtModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddDebt">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

    @code {
        private List<Transaction> transactions = new List<Transaction>();
        private int numberOfIncome;
        private int numberOfExpense;
        private int numberOfDebts;
        private List<Debt> debts = new List<Debt>();
        private Transaction newTransaction = new Transaction();
        private Debt newDebt = new Debt();
        private decimal totalTransaction;
        private decimal totalIncome;
        private decimal totalExpense;
        private decimal totalDebt;
        private bool showTransactionModal;
        private bool showDebtModal;

        private List<Category> categories;

        private List<Transaction> incomes  = new List<Transaction>();
        private List<Transaction> expenses = new List<Transaction>();

        private Transaction topIncome;
        private Transaction topExpense;
        private Debt topDebt;

        private Transaction bottomIncome;
        private Transaction bottomExpense;
        private Debt bottomDebt;

        private List<Transaction> FilteredIncomes = new();
        private List<Transaction> FilteredExpenses = new();
        private List<Debt> FilteredDebts = new();
        private DateTime? StartDate { get; set; }
        private DateTime? EndDate { get; set; }

        private int Slice1 { get; set; } 
        private int Slice2 { get; set; } 
        private int Slice3 { get; set; } 

        private string error;

        private decimal debtPayingAmount;

        protected override async Task OnInitializedAsync()
        {
            await LoadDataAsync();

        }

        private async Task FindTopTransactions()
        {

            topIncome = FilteredIncomes
                .OrderByDescending(i => i.TransactionAmount)
                .FirstOrDefault();

            topExpense = FilteredExpenses
                .OrderByDescending(e => e.TransactionAmount)
                .FirstOrDefault();

            topDebt = FilteredDebts
                .OrderByDescending(d => d.DebtAmount)
                .FirstOrDefault();

            bottomIncome = FilteredIncomes
                .OrderByDescending(i => i.TransactionAmount)
                .LastOrDefault();

            bottomExpense = FilteredExpenses
                .OrderByDescending(i => i.TransactionAmount)
                .LastOrDefault();

            bottomDebt = FilteredDebts
                .OrderByDescending(d => d.DebtAmount)
                .LastOrDefault();
        }

        private async Task LoadDataAsync()
        {
            transactions = await TransactionService.GetAllTransactionsAsync();

            incomes = await TransactionService.GetTransactionByTypeAsync("Income");
            expenses = await TransactionService.GetTransactionByTypeAsync("Expense");
            debts = await DebtService.GetAllDebtsAsync();

            FilteredIncomes = incomes;
            FilteredExpenses = expenses;
            FilteredDebts = debts;

            numberOfIncome = FilteredIncomes.Count();
            numberOfDebts = FilteredDebts.Count();
            numberOfExpense = FilteredExpenses.Count();

            categories = await CategoryService.GetAllCategoriesAsync();

            CalculateTotals();

            await FindTopTransactions();
        }

        private void CalculateTotals()
        {
            totalIncome = (decimal)FilteredIncomes.Where(t => t.TransactionType == "Income").Sum(t => t.TransactionAmount);
            totalExpense = (decimal)FilteredExpenses.Where(t => t.TransactionType == "Expense").Sum(t => t.TransactionAmount);
            totalDebt = (decimal)FilteredDebts.Sum(d => d.DebtAmount);

            totalTransaction = totalIncome + totalDebt - totalExpense;

            var incomePercentage = (totalIncome / totalTransaction) * 100;
            var expensePercentage = (totalExpense / totalTransaction) * 100;
            var debtPercentage = (totalDebt / totalTransaction) * 100;

            var total = incomePercentage + expensePercentage + debtPercentage;

            if (total > 100)
            {
                var factor = 100 / total;
                incomePercentage *= factor;
                expensePercentage *= factor;
                debtPercentage *= factor;
            }

            Slice1 = Convert.ToInt32(incomePercentage);
            Slice2 = Convert.ToInt32(expensePercentage);
            Slice3 = Convert.ToInt32(debtPercentage);

        }

        private void OpenTransactionModal()
        {
            newTransaction = new Transaction { TransactionDate = DateTime.Now };
            showTransactionModal = true;
        }

        private void CloseTransactionModal()
        {
            error = "";
            showTransactionModal = false;
        }

        private async Task AddTransaction()
        {
            try
            {
                if(newTransaction.TransactionType == "Expense")
                {
                    var totalIncome = (int)await TransactionService.GetTotalTransactionByTypeAsync("Income");
                    var totalDebt = (int)await DebtService.GetTotalDebtAsync();
                    var balance = totalIncome + totalDebt;
                    if ((int)newTransaction.TransactionAmount > balance)
                    {
                        Console.WriteLine("Not Enough Balance");
                        error = "Insufficient Balance";
                        return;
                    } 
                } 

                newTransaction.TransactionId = await TransactionService.GetTransactionsCountAsync();
                var success = await TransactionService.AddTransactionAsync(newTransaction);
                if (success)
                {
                    transactions.Add(newTransaction);
                    await LoadDataAsync();
                    CalculateTotals();
                    CloseTransactionModal();
                }
                else
                {
                    Console.WriteLine("Failed to add transaction. Duplicate TransactionId.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error adding transaction: {ex.Message}");
            }
        }

        private void OpenDebtModal()
        {
            newDebt = new Debt { DebtDate = DateTime.Now };
            showDebtModal = true;
        }

        private void CloseDebtModal()
        {
            showDebtModal = false;
        }

        private async Task AddDebt()
        {
            try
            {
                newDebt.DebtId = await DebtService.GetDebtsCountAsync();
                var success = await DebtService.AddDebtAsync(newDebt);

                if (success)
                {
                    debts.Add(newDebt);
                    CalculateTotals();
                    CloseDebtModal();
                }
                else
                {
                    Console.WriteLine("Failed to add debt. Duplicate DebtId.");
                }
            }

            catch (Exception ex)
            {
                Console.WriteLine($"Error adding debt: {ex.Message}");
            }
        }

        private void NavigateToDetailsPage(string type)
        {
            NavigationManager.NavigateTo($"/details/{type}");
        }

        private async Task PayDebt(Debt debt)
        {
            var totalIncome = await TransactionService.GetTotalTransactionByTypeAsync("Income");

            await DebtService.PayDebtAsync(debt, totalIncome, debtPayingAmount);

            debtPayingAmount = 0;
            await LoadDataAsync();
        }

        private void ApplyFilters()
        {


            var filteredIncomes = incomes;
            var filteredExpenses = expenses;
            var filteredDebts = debts;
            if (StartDate.HasValue && EndDate.HasValue)
            {
                filteredIncomes = FilterService.FilterByDate(filteredIncomes, StartDate.Value, EndDate.Value);
                filteredExpenses = FilterService.FilterByDate(filteredExpenses, StartDate.Value, EndDate.Value);
                filteredDebts = DebtFilterService.FilterByDate(filteredDebts, StartDate.Value, EndDate.Value);
            }
            FilteredIncomes = filteredIncomes;
            FilteredExpenses = filteredExpenses;
            FilteredDebts = filteredDebts;

            FindTopTransactions();
            CalculateTotals();
        }

        private async Task ClearFilters()
        {
            await LoadDataAsync();
            StartDate = null;
            EndDate = null;
        }
}

</div>