@page "/details/{type}"
@using marpha.Services
@using marpha.Data
@inject NavigationManager NavigationManager
@inject IDebtService DebtService
@inject ITransactionService TransactionService
@inject IFilterService FilterService
@inject IDebtFilterService DebtFilterService

<h3>@pageTitle</h3>


<div class="container">
    <h3>Filter and Sort Transactions</h3>

    <div class="row mb-3">
        <!-- Date Range Filter -->
        <div class="col-md-3">
            <label for="startDate">Start Date</label>
            <input type="date" id="startDate" class="form-control" @bind="StartDate" />
        </div>
        <div class="col-md-3">
            <label for="endDate">End Date</label>
            <input type="date" id="endDate" class="form-control" @bind="EndDate" />
        </div>

        <!-- Name Filter -->
        <div class="col-md-3">
            <label for="nameFilter">Name</label>
            <input type="text" id="nameFilter" class="form-control" placeholder="Search by name" @bind="NameFilter" />
        </div>

        <!-- Category Filter -->
        <div class="col-md-3">
            @if (type != "DebtDetails") 
            {
            <label for="categoryFilter">Category</label>
                <input type="text" id="categoryFilter" class="form-control" placeholder="Search by category" @bind="CategoryFilter" />
            } else
            {
                <label for="debtSource">Debt Source</label>
                <input type="text" id="debtSource" class="form-control" placeholder="Search by debtSource" @bind="DebtSource" />
            }
        </div>
    </div>

    <div class="row mb-3">
        <!-- Sort Options -->
        <div class="col-md-3">
            <label for="sortDate">Sort by Date</label>
            <select id="sortDate" class="form-control" @bind="SortByDateAscending">
                <option value="true">Ascending</option>
                <option value="false">Descending</option>
            </select>
        </div>
        <div class="col-md-3">
            <label for="sortAmount">Sort by Amount</label>
            <select id="sortAmount" class="form-control" @bind="SortByAmountAscending">
                <option value="true">Ascending</option>
                <option value="false">Descending</option>
            </select>
        </div>
    </div>

    <button class="btn btn-primary mb-3" @onclick="ApplyFilters">Apply Filters</button>
    <button class="btn btn-secondary mb-3" @onclick="ClearFilters">Clear Filters</button>
</div>

<div>
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else
    {
        @if (type == "IncomeDetails")
        {
            <table class="table table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th>#</th>
                        <th>Transaction Name</th>
                        <th>Transaction Type</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (FilteredTransactions != null)
                    {
                        int index = 1;
                        foreach (var transaction in FilteredTransactions)
                        {
                            <tr>
                                <td>@index</td>
                                <td>@transaction.TransactionName</td>
                                <td>@transaction.TransactionType</td>
                                <td>@transaction.TransactionAmount</td>
                                <td>@transaction.TransactionDate.ToShortDateString()</td>
                                <td>@transaction.TransactionCategory</td>
                                <td>@transaction.TransactionDescription</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                                </td>
                            </tr>
                            index++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center">No transactions available</td>
                        </tr>
                    }
                </tbody>
            </table>

        } else if (type == "ExpenseDetails")
        {
            <table class="table table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th>#</th>
                        <th>Transaction Name</th>
                        <th>Transaction Type</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Category</th>
                        <th>Description</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (FilteredTransactions != null)
                    {
                        int index = 1;
                        foreach (var transaction in FilteredTransactions)
                        {
                            <tr>
                                <td>@index</td>
                                <td>@transaction.TransactionName</td>
                                <td>@transaction.TransactionType</td>
                                <td>@transaction.TransactionAmount</td>
                                <td>@transaction.TransactionDate.ToShortDateString()</td>
                                <td>@transaction.TransactionCategory</td>
                                <td>@transaction.TransactionDescription</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                                </td>
                            </tr>
                            index++;
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center">No transactions available</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else if (type == "DebtDetails")
        {
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Debt Name</th>
                        <th>Description</th>
                        <th>Paid Amount</th>
                        <th>Total Debt Amount</th>
                        <th>Debt Date</th>
                        <th>Due Date</th>
                        <th>Status</th>
                        <th>Source</th>
                        <th>Pay</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (debtDetails != null)
                    {
                        @foreach (var debt in FilteredDebts)
                        {
                            <tr>
                                <td>@debt.DebtName</td>
                                <td>@debt.DebtDescription</td>
                                <td>@debt.PaidAmount</td>
                                <td>@debt.DebtAmount</td>
                                <td>@debt.DebtDate.ToShortDateString()</td>
                                <td>@debt.DebtDueDate.ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-sm @((debt.DebtAmount > debt.PaidAmount) ? "btn-warning" : "btn-success")" disabled>
                                        @(debt.DebtAmount > debt.PaidAmount ? "Due" : "Paid")
                                    </button>
                                </td>
                                <td>@debt.DebtSource</td>
                                <td class="d-flex gap-3">
                                    <input placeholder="Debt Amount to pay..." @bind="debtPayingAmount" />
                                    <button class="btn btn-secondary btn-sm" @onclick="() => PayDebt(debt)">Pay</button>
                                </td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteDebt(debt)">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="text-center">No debts found.</td>
                        </tr>
                    }
                </tbody>
            </table>

        }
    }
</div>

@code {
    [Parameter] public string type { get; set; }

    private List<Transaction> FilteredTransactions = new();
    private List<Debt> FilteredDebts = new();
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }
    private string NameFilter = string.Empty;
    private string CategoryFilter = string.Empty;
    private string DebtSource = string.Empty;
    private String SortByDateAscending = "true";
    private String SortByAmountAscending = "true";

    private string pageTitle;
    private bool isLoading = true;
    private List<Transaction> details = new List<Transaction>();
    private List<Debt> debtDetails = new List<Debt>();

    private decimal debtPayingAmount;

    protected override async Task OnInitializedAsync()
    {
        await LoadDetailsAsync();
    }

    private async Task LoadDetailsAsync()
    {

        if (type == "IncomeDetails")
        {
            pageTitle = "Income Details";
            details = await TransactionService.GetTransactionByTypeAsync("Income");
            FilteredTransactions = details;
        }
        else if (type == "DebtDetails")
        {
            pageTitle = "Debt Details";
            debtDetails = await DebtService.GetAllDebtsAsync();
            FilteredDebts = debtDetails;
        }
        else if (type == "ExpenseDetails")
        {
            pageTitle = "Expense Details";
            details = await TransactionService.GetTransactionByTypeAsync("Expense");
            FilteredTransactions = details;
        }

        isLoading = false;
    }

    private async Task DeleteTransaction(Transaction transaction)
    {
        bool deleted = await TransactionService.DeleteTransactionAsync(transaction.TransactionId);
        await LoadDetailsAsync();
    }

    private async Task DeleteDebt(Debt debt)
    {
        bool deleted = await DebtService.DeleteDebtAsync(debt.DebtId);
        await LoadDetailsAsync();
    }

    private async Task PayDebt(Debt debt)
    {
        var totalIncome = await TransactionService.GetTotalTransactionByTypeAsync("Income");

        await DebtService.PayDebtAsync(debt, totalIncome, debtPayingAmount);

        debtPayingAmount = 0;
        await LoadDetailsAsync();
    }

    private void ApplyFilters()
    {

        if(type != "DebtDetails")
        {
            var filtered = details;
            if (StartDate.HasValue && EndDate.HasValue)
            {
                filtered = FilterService.FilterByDate(filtered, StartDate.Value, EndDate.Value);
            }

            if (!string.IsNullOrWhiteSpace(NameFilter))
            {
                filtered = FilterService.FilterByName(filtered, NameFilter);
            }

            if (!string.IsNullOrWhiteSpace(CategoryFilter))
            {
                filtered = FilterService.FilterByCategory(filtered, CategoryFilter);
            }

            if(SortByAmountAscending != "true")
            {
                filtered = FilterService.SortByAmount(filtered, false);
            }

            if(SortByDateAscending != "true")
            {
                filtered = FilterService.SortByDate(filtered, false);
            }
            FilteredTransactions = filtered;
        }   
        else 
        {
            var filtered = debtDetails;
            if (StartDate.HasValue && EndDate.HasValue)
            {
                filtered = DebtFilterService.FilterByDate(filtered, StartDate.Value, EndDate.Value);
            }

            if (!string.IsNullOrWhiteSpace(NameFilter))
            {
                filtered = DebtFilterService.FilterByName(filtered, NameFilter);
            }

            if (!string.IsNullOrWhiteSpace(CategoryFilter))
            {
                filtered = DebtFilterService.FilterByCategory(filtered, CategoryFilter);
            }

            if (SortByAmountAscending != "true")
            {
                filtered = DebtFilterService.SortByAmount(filtered, false);
            }

            if (SortByDateAscending != "true")
            {
                filtered = DebtFilterService.SortByDate(filtered, false);
            }
            FilteredDebts = filtered;
        }
    }

    private async Task ClearFilters()
    {
        await LoadDetailsAsync();

        StartDate =null;
        EndDate =null;
        NameFilter = string.Empty;
        CategoryFilter = string.Empty;
        SortByDateAscending = "true";
        SortByAmountAscending = "true";
        DebtSource = string.Empty;       
    }
}