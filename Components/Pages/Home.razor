@page "/"
@using marpha.Data
@using marpha.Services
@inject ITransactionService TransactionService

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

<div class="container mt-4">
    <h3 style="color: green;">Total Balance = Total Income - Total Expense</h3>

    <div class="row">
        <div class="col-md-6">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Total Income</h5>
                <h2>@totalIncome</h2>
            </div>
        </div>
        <div class="col-md-6">
            <div class="dashboard-card bg-danger text-white text-center">
                <h5>Total Expense</h5>
                <h2>@totalExpense</h2>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" @onclick="OpenModal">Add Transaction</button>
    </div>

    <div>
        <h4>Transactions</h4>
        <ul>
            @foreach (var transaction in transactions)
            {
                <li>
                    <strong>@transaction.TransactionName</strong>
                    - @transaction.TransactionAmount
                    - @transaction.TransactionType
                    - @transaction.TransactionDate.ToString("yyyy-MM-dd")
                </li>
            }
        </ul>
    </div>
</div>

@if (showModal)

{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Transaction Name</label>
                        <input type="text" class="form-control" @bind="newTransaction.TransactionName" />
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="newTransaction.TransactionType">
                            <option value="null">Test</option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newTransaction.TransactionAmount" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.TransactionDate" />
                    </div>
                    <div class="mb-3">
                        <label>Description</label>
                        <textarea class="form-control" @bind="newTransaction.TransactionDescription"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Transaction> transactions = new List<Transaction>();
    private Transaction newTransaction = new Transaction();
    private decimal totalIncome;
    private decimal totalExpense;
    private bool showModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactionsAsync();
    }

    private async Task LoadTransactionsAsync()
    {
        transactions = await TransactionService.GetAllTransactionsAsync();
        CalculateTotals();
    }

    private void CalculateTotals()
    {
        totalIncome = (decimal)transactions
            .Where(t => t.TransactionType == "Income")
            .Sum(t => t.TransactionAmount);

        totalExpense = (decimal)transactions
            .Where(t => t.TransactionType == "Expense")
            .Sum(t => t.TransactionAmount);
    }

    private void OpenModal()
    {
        newTransaction = new Transaction
            {
             TransactionDate = DateTime.Now
            };
        showModal = true;

    }

    private async Task AddTransaction()

    {
        try
        {
            newTransaction.TransactionId = await TransactionService.GetTransactionsCountAsync();
            var success = await TransactionService.AddTransactionAsync(newTransaction);

            if (success)
            {
                transactions.Add(newTransaction);
                CalculateTotals();
                CloseModal();
            }
            else
            {
                Console.WriteLine("Failed to add transaction. Duplicate TransactionId.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding transaction: {ex.Message}");
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }
}
